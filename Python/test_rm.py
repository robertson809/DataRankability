# TEST_RM: Test the Rankability Measure module. 
#
# Author: Thomas R. Cameron
# Date: 10/13/2019
from rm_module import specR, hillR_BF, hillR_LP
import numpy as np

#####################################################
#                 Adjacency Matrices                #
#####################################################

nam = ['Dominance','Dominance+Perturbation','Perturbed Random','Nearly Disconnected','Random','Cyclic','Complete','Empty']

adj = [np.array([[0.,1,1,1,1,1],[0,0.,1,1,1,1],[0,0,0.,1,1,1],[0,0,0,0.,1,1],[0,0,0,0,0.,1],[0,0,0,0,0,0.]]),
        np.array([[0.,1,1,1,1,1],[0,0.,0,1,1,1],[1,0,0.,1,1,1],[0,0,0,0.,1,1],[0,0,0,0,0.,1],[0,0,0,0,0,0.]]),
        np.array([[0.,1,1,0,0,1],[0,0.,0,1,1,0],[0,0,0.,0,0,0],[1,1,0,0.,0,1],[1,1,0,0,0.,0],[1,1,1,0,1,0.]]),
        np.array([[0.,1,1,1,0,0],[0,0.,1,0,0,0],[0,0,0.,0,0,0],[0,0,0,0.,1,1],[0,0,0,0,0.,1],[0,0,0,0,0,0.]]),
        np.array([[0.,1,1,0,0,1],[0,0.,0,1,1,0],[0,0,0.,0,0,0],[1,0,0,0.,0,1],[1,1,0,0,0.,0],[0,1,1,0,1,0.]]),
        np.array([[0.,1,0,0,0,0],[0,0.,1,0,0,0],[0,0,0.,1,0,0],[0,0,0,0.,1,0],[0,0,0,0,0.,1],[1,0,0,0,0,0.]]),
        np.array([[0.,1,1,1,1,1],[1,0.,1,1,1,1],[1,1,0.,1,1,1],[1,1,1,0.,1,1],[1,1,1,1,0.,1],[1,1,1,1,1,0.]]),
        np.zeros((6,6))
        ]

# Big 12 (CFB) 2004, D1
a = np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
[0, 0, 5, 9, 7, 0, 6, 0, 0, 0, 0, 0],
[1, 0, 0, 6, 14, 0, 7, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 3, 17, 0, 0, 0, 0, 0, 0],
[0, 0, 0, 0, 0, 11, 24, 0, 0, 0, 0, 0],
[20, 8, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0],
[32, 0, 0, 6, 0, 21, 0, 0, 0, 0, 0, 0],
[35, 39, 0, 31, 10, 0, 27, 0, 3, 12, 7, 15],
[28, 28, 29, 0, 0, 3, 0, 0, 0, 0, 0, 0],
[30, 24, 0, 4, 0, 8, 0, 0, 21, 0, 13, 30],
[0, 3, 31, 0, 12, 0, 0, 0, 16, 0, 0, 7],
[25, 0, 0, 1, 10, 0, 60, 0, 16, 0, 0, 0]],dtype=float)
hillR_LP(a)
quit()

# Big 12 (CFB) 2005, D1
a = np.array([[0, 0, 10, 0, 0, 0, 0, 0, 10, 0, 0, 0],
[0, 0, 0, 31, 3, 29, 0, 0, 34, 0, 21, 0],
[0, 14, 0, 0, 28, 0, 0, 0, 27, 0, 28, 0],
[0, 0, 3, 0, 0, 10, 25, 0, 0, 0, 0, 0],
[0, 0, 0, 9, 0, 8, 0, 0, 0, 0, 0, 0],
[15, 0, 3, 0, 0, 0, 17, 0, 7, 0, 0, 0],
[9, 27, 7, 0, 2, 0, 0, 0, 0, 0, 0, 0],
[7, 0, 0, 16, 22, 0, 7, 0, 28, 0, 6, 0],
[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7],
[62, 92, 0, 52, 0, 31, 0, 33, 19, 0, 11, 35],
[3, 0, 0, 0, 2, 0, 0, 0, 39, 0, 0, 0],
[28, 0, 0, 13, 39, 0, 3, 2, 0, 0, 39, 0]],dtype=float)
hillR_LP(a)
quit()

# Patriot League (MBB) 2005, D1
#a = np.array([[0.00, 63.00, 9.00, 19.00, 0.00, 2.00, 4.00, 15.00],
#[0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 20.00],
#[31.00, 31.00, 0.00, 3.00, 20.00, 73.00, 2.00, 11.00],
#[10.00, 11.00, 0.00, 0.00, 0.00, 9.00, 7.00, 5.00],
#[33.00, 88.00, 15.00, 23.00, 0.00, 38.00, 26.00, 25.00],
#[4.00, 20.00, 0.00, 0.00, 0.00, 0.00, 5.00, 10.00],
#[3.00, 23.00, 3.00, 27.00, 0.00, 8.00, 0.00, 5.00],
#[0.00, 15.00, 4.00, 11.00, 0.00, 19.00, 1.00, 0.00]])
#hillR_LP(a)
#quit()

# Patriot League (MBB) 2008, D1
#a = np.array([[0.00, 34.00, 4.00, 22.00, 18.00, 23.00, 25.00, 0.00],
#[0.00, 0.00, 19.00, 2.00, 14.00, 5.00, 3.00, 2.00],
#[4.00, 0.00, 0.00, 10.00, 8.00, 2.00, 0.00, 9.00],
#[0.00, 6.00, 14.00, 0.00, 20.00, 3.00, 8.00, 18.00],
#[2.00, 11.00, 10.00, 0.00, 0.00, 20.00, 18.00, 0.00],
#[0.00, 25.00, 12.00, 1.00, 8.00, 0.00, 18.00, 4.00],
#[0.00, 10.00, 13.00, 3.00, 7.00, 5.00, 0.00, 0.00],
#[26.00, 8.00, 6.00, 0.00, 17.00, 2.00, 15.00, 0.00]])
#hillR_LP(a)

#n= 25
#a = np.random.randint(2,size=(n,n))
#while(np.trace(a)!=0):
#    a = np.random.randint(2,size=(n,n))
#hillR_LP(a)

#a = np.array([[0,1,0],[1,0,0],[1,1,0]])
#hillR_LP(a);
#quit()

#a = np.array([[0,1,0,0],[1,0,0,0],[1,1,0,0],[1,1,0,0]])
#hillR_LP(a);
#quit()
#####################################################
#                 Test Rankability Measure          #
#####################################################
sr = []
hr_bf = []
hr_lp = []
for k in range(len(nam)):
    print(nam[k]+':')
    a = adj[k]
    sr.append(specR(a))
    hr_bf.append(hillR_BF(a))
    hr_lp.append(hillR_LP(a))
    print('specR = '+str('%.4f' % sr[k])+', hillR = '+str('%.4f' % hr_bf[k])+', hillR3 = '+str('%.4f' % hr_lp[k]))
    
#print(np.corrcoef([sr,hr]))